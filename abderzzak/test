import numpy as np
from scipy.signal import butter, lfilter
import matplotlib.pyplot as plt

class AdaptiveFilter:
    def __init__(self, order, step_size):
        self.order = order
        self.step_size = step_size
        self.weights = np.zeros(order)

    def update(self, input_signal, desired_signal):
        input_signal = np.pad(input_signal, (self.order-1, 0), mode='constant')
        error = desired_signal - np.convolve(input_signal, self.weights, mode='valid')
        update_term = self.step_size * np.convolve(input_signal, error, mode='valid')
        self.weights += update_term
        return error

# Paramètres du signal
fs = 1000  # Fréquence d'échantillonnage (Hz)
t = np.linspace(0, 1, fs, endpoint=False)  # Temps en secondes
f = 10  # Fréquence du signal sinusoïdal (Hz)
input_signal = np.sin(2 * np.pi * f * t)

# Modulation BPSK
threshold = 0
binary_sequence = np.where(input_signal > threshold, 1, -1)

# Filtre passe-bas
cutoff = 5  # Fréquence de coupure du filtre passe-bas (Hz)
b, a = butter(4, cutoff / (fs / 2), btype='low', analog=False)
filtered_signal = lfilter(b, a, binary_sequence)

# Ajout de bruit gaussien
snr = 10  # Rapport signal sur bruit (dB)
signal_power = np.mean(filtered_signal ** 2)
noise_power = signal_power / (10 ** (snr / 10))
noise = np.sqrt(noise_power) * np.random.randn(len(filtered_signal))
noisy_signal = filtered_signal + noise

# Démodulation BPSK
demodulated_signal = np.sign(noisy_signal)

# Filtrage adaptatif
adaptive_filter = AdaptiveFilter(order=50, step_size=0.0001)
desired_signal = binary_sequence[adaptive_filter.order-1:]
filtered_signal = adaptive_filter.update(demodulated_signal, desired_signal)

# Visualisation des signaux
plt.figure(figsize=(12, 8))

plt.subplot(5, 1, 1)
plt.plot(t, input_signal, label='Signal d\'entrée')
plt.xlabel('Temps (s)')
plt.ylabel('Amplitude')
plt.legend()

plt.subplot(5, 1, 2)
plt.plot(t, binary_sequence, label='Signal modulé (BPSK)')
plt.xlabel('Temps (s)')
plt.ylabel('Amplitude')
plt.legend()

plt.subplot(5, 1, 3)
plt.plot(t, filtered_signal, label='Signal filtré (passe-bas)')
plt.xlabel('Temps (s)')
plt.ylabel('Amplitude')
plt.legend()

plt.subplot(5, 1, 4)
plt.plot(t, noisy_signal, label='Signal bruité')
plt.xlabel('Temps (s)')
plt.ylabel('Amplitude')
plt.legend()

plt.subplot(5, 1, 5)
plt.plot(t[adaptive_filter.order-1:], filtered_signal, label='Signal filtré adaptatif')
plt.xlabel('Temps (s)')
plt.ylabel('Amplitude')
plt.legend()

plt.tight_layout()
plt.show()
